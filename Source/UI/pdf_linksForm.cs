//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Windows.Forms;
using iTextSharp.text;
using iTextSharp.text.pdf;

namespace NSPdf_links {

    public partial class pdf_linksForm : INotifyPropertyChanged {

        const string DRAG_TYPE = "FileDrop";

        #region fields
        PropertyChangedEventHandler _pceh;
        static string _findFile;
        List<FullFilePath> _instrSheets = new List<FullFilePath>();
        List<FullFilePath> _opSheets = new List<FullFilePath>();
        string _insSheetLoc;
        string _opSheetLoc;
        #endregion

        #region ctor
        public pdf_linksForm() {
            InitializeComponent();
            instructionSheetLocation = @"U:\Pack\Instruction_Sheets\Approved";
            opsheetLocation = @"U:\Pack\OpSheets\Approved";
        }
        #endregion

        #region properties
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _pceh += value; } remove { _pceh -= value; } }
        public string instructionSheetLocation {
            get { return _insSheetLoc; }
            set {
                if (string.Compare(this.instructionSheetLocation, value, true) != 0) {
                    _insSheetLoc = value;
                    doNotify(MethodBase.GetCurrentMethod());
                }
            }
        }

        // U:\Pack\OpSheets\Approved
        public string opsheetLocation {
            get { return _opSheetLoc; }
            set {
                if (string.Compare(this.opsheetLocation, value, true) != 0) {
                    _opSheetLoc = value;
                    doNotify(MethodBase.GetCurrentMethod());
                }
            }
        }

        #endregion

        void exitClick(object sender, EventArgs ea) {
            CancelEventArgs cea = new CancelEventArgs();

            Application.Exit(cea);
            if (cea.Cancel) {
                return;
            }
            Application.Exit();
        }

        void formLoad(object sender, EventArgs ea) {

        }

        [STAThread()]
        public static void Main(string[] args) {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new pdf_linksForm());
        }

        void tsmiFileNew_Click(object sender, EventArgs e) {
            createDocument("new_test.pdf");

        }

        string prev;

        void btnCreate_Click(object sender, EventArgs e) {
            OpenFileDialog ofd = new OpenFileDialog();

            ofd.InitialDirectory = Directory.GetCurrentDirectory();
            ofd.FileName = "PDF|*.pdf";
            ofd.FilterIndex = 0;
            ofd.Multiselect = false;
            ofd.AddExtension = true;
            if (ofd.ShowDialog()  == DialogResult.OK) {
                createDocument(ofd.FileName);
            }
        }

        void lbInstruct_DragEnter(object sender, DragEventArgs e) {
            e.Effect = DragDropEffects.None;
            if (verifyProperDataContent(e, DRAG_TYPE))
                e.Effect = DragDropEffects.Link;
        }

        void lbInstruct_DragDrop(object sender, DragEventArgs e) {
            addDataContent(e, DRAG_TYPE, _instrSheets, lbInstruct);
        }

        void lbOps_DragEnter(object sender, DragEventArgs e) {
            e.Effect = DragDropEffects.None;
            if (verifyProperDataContent(e, DRAG_TYPE))
                e.Effect = DragDropEffects.Link;

        }

        void lbOps_DragDrop(object sender, DragEventArgs e) {
            addDataContent(e, DRAG_TYPE, _opSheets, lbOps);
        }

        bool verifyProperDataContent(DragEventArgs e, string dragType) {
            string[] files;

            if (e.Data.GetDataPresent(dragType) && (files = e.Data.GetData(dragType) as string[]) != null && files.Length > 0)
                return true;
            return false;
        }

        static void addDataContent(DragEventArgs e, string dragType, List<FullFilePath> alist, ListBox lb) {
            string[] files;
            int nadded = 0;

            if (e.Data.GetDataPresent(DRAG_TYPE) && (files = e.Data.GetData(DRAG_TYPE) as string[]) != null && files.Length > 0) {
                foreach (string aFile in files) {
                    _findFile = aFile;
                    if (!alist.Exists(findIndexOf)) {
                        alist.Add(new FullFilePath(aFile));
                        nadded++;
                    }
                }
            }
            if (nadded > 0) {
                Logger.log("Added " + nadded + " items.");
                lb.DataSource = null;
                lb.DisplayMember = "filename";
                lb.ValueMember = "fullPath";
                lb.DataSource = alist;
            }
        }

        void doNotify(string propName) {
            if (_pceh != null)
                _pceh(this, new PropertyChangedEventArgs(propName));
        }

        void doNotify(MethodBase mb) {
            string mbname = mb.Name;

            if (mb.Name.StartsWith("set_", StringComparison.InvariantCulture) ||
                mb.Name.StartsWith("get_", StringComparison.InvariantCulture))
                mbname = mb.Name.Substring(4);
            doNotify(mbname);
        }

        // U:\Pack\Instruction_Sheets\Approved

        void createDocument(string filename) {

            Document doc = new Document(PageSize.LETTER, 50, 50, 50, 50);
            FileStream fs = new FileStream(filename, FileMode.OpenOrCreate);
            PdfWriter writer = PdfWriter.GetInstance(doc, fs);

            try {
                doc.Open();

                doc.Add(new Paragraph("Instruction sheets:"));
                addFromList(doc, _instrSheets);
                doc.Add(new Paragraph("Operation sheets:"));
                addFromList(doc, _opSheets);
                doc.Close();
            } catch (Exception ex) {
                Logger.log(MethodBase.GetCurrentMethod(), ex);
            }
        }

        void addFromList(Document doc, List<FullFilePath> alist) {
            Anchor a;

            foreach (FullFilePath ffp in alist) {
                a = new Anchor(ffp.filename);
                a.Font.Color = BaseColor.BLUE;
                a.Reference = ffp.fullPath;
                doc.Add(a);
                doc.Add(new Rectangle(10, 10));
                doc.Add(new Paragraph());
            }
        }

        static bool findIndexOf(FullFilePath ffp) {
            return string.Compare(_findFile, ffp.fullPath, true) == 0;
        }

        void btnClear_Click(object sender, EventArgs e) {
            resetDataSource(lbInstruct, _instrSheets);
            resetDataSource(lbOps, _opSheets);
        }

        static void resetDataSource(ListBox lb, List<FullFilePath> alist) {
            var avar = lb.SelectionMode;

            lb.DataSource = null;
            lb.SelectionMode = SelectionMode.None;
            alist.Clear();
            lb.DataSource = alist;
            lb.SelectionMode = avar;
        }

    }
}
